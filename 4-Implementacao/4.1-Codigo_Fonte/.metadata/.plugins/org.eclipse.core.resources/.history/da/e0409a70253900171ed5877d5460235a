package br.com.eits.boot.domain.service;

import org.directwebremoting.annotations.RemoteProxy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import br.com.eits.boot.domain.entity.conta.Usuario;
import br.com.eits.boot.domain.entity.conta.UsuarioPerfil;
import br.com.eits.boot.domain.repository.account.IUserRepository;
import br.com.eits.common.application.i18n.MessageSourceHolder;

/**
 * 
 * @author rodrigo@eits.com.br
 */
@Service
@RemoteProxy
@Transactional
public class UsuarioServico
{
	/*-------------------------------------------------------------------
	 *				 		     ATTRIBUTES
	 *-------------------------------------------------------------------*/
	/**
	 * Password encoder
	 */
	@Autowired
	private PasswordEncoder passwordEncoder;

	//Repositories
	/**
	 * 
	 */
	@Autowired
	private IUserRepository userRepository;

	/*-------------------------------------------------------------------
	 *				 		     SERVICES
	 *-------------------------------------------------------------------*/
	/**
	 * 
	 * @param user
	 * @return
	 */
	@PreAuthorize("hasAnyAuthority('"+UsuarioPerfil.ADMINISTRATOR_VALUE+"','"+UsuarioPerfil.MANAGER_VALUE+"')")
	public Usuario insertUser( Usuario usuario )
	{
		usuario.setAtivo( false );
		usuario.setSenha( this.passwordEncoder.encode(user.getPassword()) );

		return this.userRepository.save( usuario );
	}
	
	/**
	 * 
	 * @param id
	 * @return
	 */
	@Transactional(readOnly=true)
	public Usuario buscarUsuarioPorId( long id )
	{
		final Usuario usuario = this.userRepository.buscarUm( id );
		Assert.notNull( user, MessageSourceHolder.getMessage("repository.notFoundById", id) );
		return user;
	}
	
	/**
	 * 
	 * @param pageable
	 * @param filters
	 * @return
	 */
	@Transactional(readOnly=true)
	public Page<Usuario> buscarUsuariosPorFiltros( String filter, PageRequest pageable )
	{
		return this.userRepository.listByFilters( filter, pageable );
	}
}